#!/bin/bash

# Gather some info about your system which will be used to determine the config
revision=$(cat /proc/cpuinfo | grep 'Revision' | awk '{print $3}')
board="Unknown" # Default will be overridden if determined
memtotal=$(cat /proc/meminfo | grep MemTotal | awk '{print $2}') # Amount of memory in KB
memavail=$(cat /proc/meminfo | grep MemAvailable | awk '{print $2}') # Amount of memory in KB
memvariance=$(($memtotal - $memavail)) # Figure out how much memory is being used so we can make dynamic decisions for this board
mem=$(( (($memtotal - $memvariance) / 1024) - 518)) # Amount of memory in MB
memreservation=$((($memavail * 20/100) / 1024)) # Reserve memory for system (Failure to do this will cause "Error occurred during initialization of VM")
gamemem=$(($mem - $memreservation)) # Calculate how much memory we can give to the game server (in MB)
gamememMIN=$((($mem * 80/100) - 1024)) # Figure a MINIMUM amount of memory to allocate
# Seriously, if you have 100 GB RAM, we don't need more than 12 of it
if (( $gamemem > 12000 )); then
    gamemem=12288
    gamememMIN=1500
fi
oc_volt=0
oc_friendly="N/A"
if (( $gamememMIN < 0 )); then
  dialog --title "Error" \
    --msgbox "
YOU DON'T HAVE ENOUGH AVAILABLE RAM

Your system shows only $((${memavail} / 1024))MB RAM available, but with the applications running you have only $mem MB RAM available for allocation, which doesn't leave enough for overhead. Typically I'd want to be able to allocate at least 2 GB RAM.

Either you have other things running, or your board is simply not good enough to run a Minecraft-Server." 18 50
   echo
   echo
   echo "Failed. Not enough memory available for Minecraft-Server."
   echo
   exit 0
fi

if
   [[ "$revision" == *"a03111" ]] ||
   [[ "$revision" == *"b03111" ]] ||
   [[ "$revision" == *"b03112" ]] ||
   [[ "$revision" == *"b03114" ]] ||
   [[ "$revision" == *"c03111" ]] ||
   [[ "$revision" == *"c03112" ]] ||
   [[ "$revision" == *"c03114" ]] ||
   [[ "$revision" == *"d03114" ]]; then
     board='Raspberry Pi 4'
     boardnum=1
     oc_volt=4
     oc_freq=1900
     oc_friendly="1.9 GHz"
elif [[ "$revision" == *"c03130" ]]; then
  board='Raspberry Pi 400'
  boardnum=2
  oc_volt=6
  oc_freq=2000
  oc_friendly="2.0 GHz"
fi

if (( $gamemem > 3800 )); then
  kernel=$(uname -a)
  if [[ ! "$kernel" == *"amd64"* ]] && [[ ! "$kernel" == *"arm64"* ]] && [[ ! "$kernel" == *"aarch64"* ]] && [[ ! "$kernel" == *"x86_64"* ]]; then

    dialog --title "Warning" \
    --msgbox "
WARNING: 32-Bit OS on 64-Bit Board!

Upgrade your distro to 64-bit to use your RAM.

Since you are only using a 32-bit OS, you cannot use more than 4 GB RAM for Minecraft. Abort and Upgrade." 13 50

    gamemem=2500
    gamememMIN=1500

  fi
else if (( $gamememMIN < 1024 )); then
  dialog --title "Warning" --yesno "\nWARNING: Either you have other things running, or your board is simply not good enough to run a Minecraft-Server. It is recommended you abort. ONLY install this on a dedicated system with no desktop environment or other applications running.\n\nWould you like to ABORT?" 14 50
  case $? in
  0)
   echo
   echo
   echo "Aborted."
   echo
   exit 1 ;;
  esac
fi
fi

dialog --title "Minecraft-Server Installer $pcver"  --yesno "Automatically load the server on boot?" 6 60
  case $? in
  0)
   cron=1
   ;;
  1)
   cron=0
   ;;
  esac

dialog --title "Information" \
--msgbox "
Detected Hardware:
$board

RAM to Allocate:
${gamememMIN##*( )}MB - ${gamemem##*( )}MB

Overclock To:
$oc_friendly

Server User:
$user

Server Version:
$flavor $mcver ($gamemode)" 20 50

if [[ ! $oc_volt == 0 ]]; then
  dialog --title "Confirmation"  --yesno "\nI will be modifying ${configfile} to overclock this ${board}. I am not responsible for damage to your system, and you do this at your own risk.\n\nContinue?" 12 50
  case $? in
  1)
   echo
   echo
   echo "Aborted."
   echo
   exit 1 ;;
  esac
fi


###############################################
# Finished Asking Questions: Begin Installation
###############################################
###############################################
# Create the scripts
###############################################

dialog --infobox "Creating scripts..." 3 34 ; sleep 1

# Create the run script
if  
  if
    # Non-forge servers
    echo "exec java ${cli_args} -Xms${gamememMIN}M -Xmx${gamemem}M -jar `basename $jarfile` --nogui" >> ${instdir}server
  fi
fi
chmod +x ${instdir}server
# Set ownership to the user
chown -R $user:$user $instdir
# Need to generate the config and EULA
# Note: Because the EULA is not yet accepted within eula.txt, the server will init and quit immediately.
if [[ $upgrade == 0 ]] || [[ ! -e ${instdir}server.properties ]]; then
  dialog --infobox "Initializing server..." 3 34 ; sleep 1
  su - $user -c ${instdir}server > /dev/null 2>&1
fi

# Accepting the EULA
if [[ $eula == "accepted" ]]; then
  echo "# https://account.mojang.com/documents/minecraft_eula ACCEPTED by user during installation
# $eula_stamp
eula=true" > ${instdir}eula.txt
fi

# Create the safe reboot script
echo '#!/bin/bash
if [[ $EUID -ne 0 ]]; then
  echo "ERROR: This script must be run as root" 2>&1
  exit 1
fi
su - $user -c "'${instdir}'stop"
echo
echo "Rebooting."
/sbin/reboot' > ${instdir}reboot
chmod +x ${instdir}reboot

# Create the safe stop script
echo '#!/bin/bash
user=$(whoami);
if [[ $user != "'${user}'" ]]; then
  if su - '$user' -c "/usr/bin/screen -list" | grep -q Minecraft-Server; then
    printf "Stopping Minecraft-Server. This will take time."
    su - '$user' -c "screen -S Minecraft-Server -p 0 -X stuff \"stop^M\""
    running=1
  fi
  while [[ $running == 1 ]]; do
    if ! su - '$user' -c "/usr/bin/screen -list" | grep -q Minecraft-Server; then
      running=0
    fi
    sleep 3
    printf "."
  done
else
  if /usr/bin/screen -list | grep -q Minecraft-Server; then
    printf "Stopping Minecraft-Server. This will take time."
    screen -S Minecraft-Server -p 0 -X stuff "stop^M"
    running=1
  fi
  while [[ $running == 1 ]]; do
    if ! /usr/bin/screen -list | grep -q Minecraft-Server; then
      running=0
    fi
    sleep 3
    printf "."
  done
fi
echo
echo "Done. Minecraft has been stopped safely."' > ${instdir}stop
chmod a+x ${instdir}stop

# Create the service
echo '#/bin/bash
set -e

### BEGIN INIT INFO
# Provides:       Minecraft-Server
# Required-Start: $remote_fs $network
# Required-Stop:  $remote_fs
# Default-Stop:   0 1 6
# Short-Description: Minecraft-Server powered by Minecraft-Server Installer
### END INIT INFO

case "$1" in

stop)
      '${instdir}'stop
    ;;

status)
      user=$(whoami); if [ $user != "'${user}'" ]; then echo "Cannot run as ${user} - expecting '${user}'"; exit; fi
      if screen -ls | grep -q Minecraft-Server; then
        echo 1
      else
        echo 0
      fi
    ;;

*)

    echo "usage: $0 <stop|status>" >&2

    exit 1
esac
' > /etc/init.d/Minecraft-Server
chmod a+x /etc/init.d/Minecraft-Server
###############################################
# /Create the scripts
###############################################
###############################################
# Overclock
###############################################

if [[ ! $oc_volt == 0 ]]; then
  dialog --infobox "Overclocking your system..." 3 34 ; sleep 1
  datestamp=$(date +"%Y-%m-%d_%H-%M-%S")

  cp $configfile /boot/config-${datestamp}.txt

  # Replace existing overclock settings or add new ones if none exist

  /bin/sed -i -- "/over_voltage=/c\over_voltage=${oc_volt}" $configfile
  if ! grep -q "over_voltage=" $configfile; then
    echo "over_voltage=$oc_volt" >> $configfile
  fi

  /bin/sed -i -- "/arm_freq=/c\arm_freq=${oc_freq}" $configfile
  if ! grep -q "arm_freq=" $configfile; then
    echo "arm_freq=${oc_freq}" >> $configfile
  fi

  /bin/sed -i -- "/dtparam=audio=/c\dtparam=audio=off" $configfile
  if ! grep -q "dtparam=audio=" $configfile; then
    echo "dtparam=audio=" >> $configfile
  fi

fi

###############################################
# /Overclock
###############################################
clear
  echo
  echo
  echo "Installation complete."
  echo
  echo "Minecraft-Server is now running on $ip"
  echo