# Create the safe reboot script
echo '#!/bin/bash
if [[ $EUID -ne 0 ]]; then
  echo "ERROR: This script must be run as root" 2>&1
  exit 1
fi
su - $user -c "'${instdir}'stop"
echo
echo "Rebooting."
/sbin/reboot' > ${instdir}reboot
chmod +x ${instdir}reboot

# Create the safe stop script
echo '#!/bin/bash
dialog --infobox "Creating scripts..." 3 34 ; sleep 1

# Create the run script
echo '#!/bin/bash
user=$(whoami); if [[ $user != "'${user}'" ]]; then echo "Cannot run as ${user} - expecting '${user}'"; exit; fi
cd "$(dirname "$0")"' > ${instdir}server
if [[ $flavor == "Cuberite" ]]; then
  echo ${instdir}cuberite/Cuberite >> ${instdir}server
else
  # Forge requires its own unix_args be included
  if [[ $flavor == "Forge" ]]; then
    # Forge servers
    forge_args=$(ls ${instdir}libraries/net/minecraftforge/forge/*/unix_args.txt | head -n 1)
    forge_args="@${forge_args}"
    echo "exec java ${cli_args} -Xms${gamememMIN}M -Xmx${gamemem}M ${forge_args}" >> ${instdir}server
  else
    # Non-forge servers
    echo "exec java ${cli_args} -Xms${gamememMIN}M -Xmx${gamemem}M -jar `basename $jarfile` --nogui" >> ${instdir}server
  fi
fi
chmod +x ${instdir}server
# Set ownership to the user
chown -R $user:$user $instdir
# Need to generate the config and EULA
# Note: Because the EULA is not yet accepted within eula.txt, the server will init and quit immediately.
if [[ $upgrade == 0 ]] || [[ ! -e ${instdir}server.properties ]]; then
  dialog --infobox "Initializing server..." 3 34 ; sleep 1
  su - $user -c ${instdir}server > /dev/null 2>&1
fi
user=$(whoami);
if [[ $user != "'${user}'" ]]; then
  if su - '$user' -c "/usr/bin/screen -list" | grep -q Minecraft-Server; then
    printf "Stopping Minecraft-Server. This will take time."
    su - '$user' -c "screen -S Minecraft-Server -p 0 -X stuff \"stop^M\""
    running=1
  fi
  while [[ $running == 1 ]]; do
    if ! su - '$user' -c "/usr/bin/screen -list" | grep -q Minecraft-Server; then
      running=0
    fi
    sleep 3
    printf "."
  done
else
  if /usr/bin/screen -list | grep -q Minecraft-Server; then
    printf "Stopping Minecraft-Server. This will take time."
    screen -S Minecraft-Server -p 0 -X stuff "stop^M"
    running=1
  fi
  while [[ $running == 1 ]]; do
    if ! /usr/bin/screen -list | grep -q Minecraft-Server; then
      running=0
    fi
    sleep 3
    printf "."
  done
fi
echo
echo "Done. Minecraft has been stopped safely."' > ${instdir}stop
chmod a+x ${instdir}stop

# Create the service
echo '#/bin/bash
set -e
if [[ ! $oc_volt == 0 ]]; then
  dialog --infobox "Overclocking your system..." 3 34 ; sleep 1
  datestamp=$(date +"%Y-%m-%d_%H-%M-%S")

  cp $configfile /boot/config-${datestamp}.txt

  # Replace existing overclock settings or add new ones if none exist

  /bin/sed -i -- "/over_voltage=/c\over_voltage=${oc_volt}" $configfile
  if ! grep -q "over_voltage=" $configfile; then
    echo "over_voltage=$oc_volt" >> $configfile
  fi

  /bin/sed -i -- "/arm_freq=/c\arm_freq=${oc_freq}" $configfile
  if ! grep -q "arm_freq=" $configfile; then
    echo "arm_freq=${oc_freq}" >> $configfile
  fi

  /bin/sed -i -- "/dtparam=audio=/c\dtparam=audio=off" $configfile
  if ! grep -q "dtparam=audio=" $configfile; then
    echo "dtparam=audio=" >> $configfile
  fi

fi